public class WordCountSort{
  public static class Map extends Mapper<LongWritable, Text, Text,IntWritable>{
    private Text word = new Text();
    private static final IntWritable iw = new IntWritable(1);
    protected void map(LongWritable key , Text value, Context context) throws IOException, IntteruptedException {
      String line = value.toString();
      StringTokenizer token = new StringTokenizer(line);
      while(token.hasMoreTokens()){
        word.set(token.nextToken());
        context.write(word,iw);
      }
   }
  }
  public static class Reduce extends Reducer<Text, IntWritable,Text ,IntWritable>{
    private IntWritable re = new IntWritable(1);
    protected void reduce (Text key , Iterable<IntWritable> values , Context context) throws IOException , InterruptedException {
      int sum = 0;
      for(IntWritable val : values){
        sum += val.get();
      }
      re.set(sum);
      context.write(key,re);
    }
  }
  public static void main(String[] args) throws Exception{
    Configuration conf = new Configuration();
    String[] argsTest = new GenericOptionsParser(conf,args).getRemainingArgs();
    if(argsTest.length != 2){
      System.out.println("error please input WordCountSort <input> <output>");
      System.exit(0);
    }
    Job job = Job.getInstance(conf);
    job.setJobName("word count");
    job.setJarByClass(WordCountSort.class);
    job.setMapperClass(Map.class);
    job.setReducerClass(Reduce.class);
    job.setCombinerClass(Reduce.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(IntWritable.class);
    FileInputFormat.addInputPath(job, new Path(argsTest[0]));
    FileOutputFormat.setOutputPath(job, new Path(argsTest[1]));
    System.exit(job.waitForCompletion(true) ? 0:1);
  }
}
